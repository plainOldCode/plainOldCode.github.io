---
published: false
title: TEST
layout: post
---
CPU 코어가 갯수가 늘어나면서 최근 프로그래밍은 기존의 패러다임과는 다른 방향으로 전개되고 있다.
코어가 늘어나는 것은 더이상 CPU의 hz만 올려서는 성능향상을 이루는데 한계가 보였고 이를 병렬코어를 이용하여 조금 더 많은 일을 할 수 있도록 하는 방향으로 설계가 되고 있기 때문이다.
하드웨어는 대충 이런 방향인데 소프트웨어는 이러한 영향으로 병렬프로그래밍이 기본이 되었다.

기존에 쓰레드를 넘어서서 동시에 프로세스가 수행되고 이를 공유한다.

공유 자원은 늘 그렇듯이 lock 이 수반되고 이를 점유하는 싸움을 관리하는 것이 성능에 가장 큰 영향을 미친다.

node.js 로 프로그래밍을 하게 되면 이 부분은 크게 신경쓰지 않게 되는데 ...
애초에 싱글 스레드라 공유 자원에 대한 신경은 쓰지 않게 된다.  

현재 우리회사에서는 코어별로 fork 시켜서 db가 일종의 공유자원이 되는 방향으로 설계를 해두었는데 아직까지는 잘버틴다. 
애초에 공유자원의 점유 싸움이 일어나지 않는 구조라서 그런지도 모르겠다.

node.js가 처음 나왔을 때도 결국 하드웨어의 잇점을 살리지 못하는 아키텍쳐지만 빠르고 간편하니 좋다가 매력이었는데..
이런 매력은 처음 빌딩하는데는 매력적이지만 관리를 하는 측면에서는 뭔가 불안하다.

결국 이를 해결하기 위해서 각종 인하우스 도구를 만들게 된다.
여기서 매력이 또 생기는데 애초에 javascript라서 코어 라이브러리 개발자가 만드는데도 큰 부담이 없다(물론 그 개발자가 우리 CTO역량은 되야함…!)
이 것이 생명력을 유지하는데 도움이 되는듯 하다.




